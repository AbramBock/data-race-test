= Alternative memory state machines for helgrind =

On this page I would like to collect links to various known state machines for Eraser-like algorithms and discuss some new approaches. 

== Legend == 
  * *W* -- write (modification) access. 
  * *R* -- read-only access.
  * *T* -- a thread. 
  * *S* -- a thread segment. 
  * *L* -- a lock. 

  * *TS* -- a thread set (set of threads). 
  * *SS* -- a segment set (set of thread segments). All segments in a segment set belong to different threads. 
  * *LS* -- a lock set (set of locks). 

  * *TS={T1,T2,...,Tn}* -- a thread set consisting of threads T1,T2,...Tn.
  * *SS={S1,S2,...,Sn}*  -- a segment set consisting of segments S1,S2,...,Sn
  * *LS={L1,L2,...,Lm}* -- a lock set consisting of locks L1,L2,...,Lm. 

  * *T(S)* -- thread to which the segment S belongs. 
  * *TS(SS)* -- set of threads to which segments of SS belong. 


  * State named 'State R'. The memory location was read in thread segments SS with common locks LS.  
    http://data-race-test.googlecode.com/svn/trunk/msm/legend_r.png
  * State named 'State W'. The memory location was accessed in thread segments SS with common locks LS. At least one access to this memory location was modification. 
    http://data-race-test.googlecode.com/svn/trunk/msm/legend_w.png
  * State named 'State WR'. The memory location was modified in thread segments SSW with common locks LSW. Also the memory location was accessed read-only in thread segments SSR with common locks LSR. 
    http://data-race-test.googlecode.com/svn/trunk/msm/legend_wr.png

== Helgrind 3.3.0 == 
Here we describe the state machine in helgrind 3.3.0. 
Edges that lead to states NoAccess and to New are not shown. 

    http://data-race-test.googlecode.com/svn/trunk/msm/helgrind330.png
Edges (state transitions): 
  * E1: new memory is allocated. 
  * E2: First read or write access to this memory after allocation. Current thread segment S is stored. 
  * E3: 
    * T(oldS)=T(newS), i.e. access in the same thread. 
    * happens-before(oldS, newS), i.e. old segment and new segment are in different threads but old segment must happen before new segment (due to conditional variable, semaphore or thread join). 



= Links =
  * [http://www.cs.ucsd.edu/~savage/papers/Tocs97.pdf The Eraser paper] 
  * [http://citeseer.ist.psu.edu/701779.html Object Race Detection (2001)]
  * [http://citeseer.ist.psu.edu/153236.html Improving the Accuracy of Data Race Detection (1991)]
  * What else? 