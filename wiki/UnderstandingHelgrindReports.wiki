#summary Helgrind reports explained on examples 

The goal of this page 

Simple races could be obvious once you get a report from Helgrind. <br>
However in some cases getting a Helgrind report is just a beginning of the bug analysis. <br>
Here we show several exemplary races with corresponding reports and explain how to analyze the races in each case. <br>

*TODO*: Under construction! 

All the examples on this page are taken from RacecheckUnittest. 

=Simple race=
The simplest example of data race is *test301* of RacecheckUnittest. 
{{{
3630 int     GLOB = 0;
3631
3632 void Worker1() { GLOB=1; }
3633 void Worker2() { GLOB=2; }
3634
3635 void Run() {
3636   printf("test301: simple race.\n");
3637   MyThread t1(Worker1), t2(Worker2);
3638   t1.Start();
3639   t2.Start();
3640   t1.Join();   t2.Join();
3641 }
}}}

Running Helgrind: 
{{{
% valgrind --tool=helgrind ./a.out 301
test301: simple race.
==15966== Thread #2 was created
==15966==    at 0x3D840B5E60: clone (in /lib64/tls/libc-2.3.5.so)
==15966==    by 0x4C2B0D3: do_clone (in /lib64/tls/libpthread-2.3.5.so)
==15966==    by 0x4C2BAE1: pthread_create@@GLIBC_2.2.5 (in /lib64/tls/libpthread-2.3.5.so)
==15966==    by 0x4A0A601: pthread_create@* /home/kcc/valgrind/hgdev/helgrind/hg_intercepts.c:213
==15966==    by 0x40DD1F: MyThread::Start(void*) thread_wrappers_pthread.h:242
==15966==    by 0x403AB3: test301::Run() racecheck_unittest.cc:3638
==15966==    by 0x40A238: main racecheck_unittest.cc:144
==15966==
==15966== Thread #3 was created
==15966==    at 0x3D840B5E60: clone (in /lib64/tls/libc-2.3.5.so)
==15966==    by 0x4C2B0D3: do_clone (in /lib64/tls/libpthread-2.3.5.so)
==15966==    by 0x4C2BAE1: pthread_create@@GLIBC_2.2.5 (in /lib64/tls/libpthread-2.3.5.so)
==15966==    by 0x4A0A601: pthread_create@* /home/kcc/valgrind/hgdev/helgrind/hg_intercepts.c:213
==15966==    by 0x40DD1F: MyThread::Start(void*) thread_wrappers_pthread.h:242
==15966==    by 0x403AC1: test301::Run() racecheck_unittest.cc:3639
==15966==    by 0x40A238: main racecheck_unittest.cc:144
==15966==
==15966== T3: Possible data race during write of size 4 at 0x6196F4
==15966==    at 0x401BFE: test301::Worker2() racecheck_unittest.cc:3633
==15966==    by 0x4A0A71E: mythread_wrapper /home/kcc/valgrind/hgdev/helgrind/hg_intercepts.c:193
==15966==    by 0x4C2AF9E: start_thread (in /lib64/tls/libpthread-2.3.5.so)
==15966==    by 0x3D840B5EA1: clone (in /lib64/tls/libc-2.3.5.so)
==15966==   old state = {Write; #SS=1; #LS=0; S2/T2}
==15966==   new state = {Write; #SS=2; #LS=0; S2/T2, S4/T3}
==15966==   Location 0x6196F4 has never been protected by any lock
==15966==   Address 0x6196F4 is 0 bytes inside data symbol "_ZN7test3014GLOBE"
==15966==
==15966== TRACE {{{: Access = {0x6196F4 S4/T3 write} State = {Write; #SS=1; #LS=0; S4/T3}
==15966==  Access stack trace:
==15966==    at 0x401BFE: test301::Worker2() racecheck_unittest.cc:3633
==15966==    by 0x4A0A71E: mythread_wrapper /home/kcc/valgrind/hgdev/helgrind/hg_intercepts.c:193
==15966==    by 0x4C2AF9E: start_thread (in /lib64/tls/libpthread-2.3.5.so)
==15966==    by 0x3D840B5EA1: clone (in /lib64/tls/libc-2.3.5.so)
==15966==  Locks held:
==15966==    None
==15966== }}}
==15966==
==15966== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 2 from 1)
}}}


So, what information do we get from Helgrind? <br>


First of all, we get the information about the threads involved in the data race. 
For each thread a stack trace (context) of it's creation is printed. For each thread this is printed just once. 
{{{
==15966== Thread #2 was created
==15966==    at 0x3D840B5E60: clone (in /lib64/tls/libc-2.3.5.so)
...
==15966==    by 0x403AB3: test301::Run() racecheck_unittest.cc:3638
==15966==    by 0x40A238: main racecheck_unittest.cc:144
...
==15966== Thread #3 was created
==15966==    at 0x3D840B5E60: clone (in /lib64/tls/libc-2.3.5.so)
...
==15966==    by 0x403AC1: test301::Run() racecheck_unittest.cc:3639
==15966==    by 0x40A238: main racecheck_unittest.cc:144
}}}






