#summary The memory state machine which will likely appear in Helgrind 3.4.0

For legend see  MemoryStateMachines. 

See also [MSMProp1]

    http://data-race-test.googlecode.com/svn/trunk/msm/helgrind340.png
|| *Edge* || *Old state* || *Access type*     ||  *Condition*     || *New state* || *Segment set*     || *Lock set*      || 
|| E1     || New         || read              ||  -               || Read        || {currS}           || {currLS}        || 
|| E2     || New         || write             ||  -               || Write       || {currS}           || {currLS}        || 
|| E3     || Read        || read              ||  -               || Read        || *SS_update*       || *LS_update*     || 
|| E5     || Read        || write             ||  -               || Write       || *SS_update*       || *LS_update*     || 
|| E4     || Write       || read              || *HB(SS, currS)*  || Read        || {currS}           || {currLS}        || 
|| E6     || Write       || read              || *!HB(SS, currS)* || Write       || *SS_update*       || *LS_update*     || 
|| E7     || Read        || write             || *is_race*        || Race        || -                 || -               || 
|| E8     || Write       || *                 || *is_race*        || Race        || -                 || -               || 
 

*is_race*
{{{
  def is_race:
    return #LS==0 && #SS > 1
}}}

*SS_update*:
{{{
  def SS_update:
    newSS = {currS}
    for S in oldSS: 
      if(!HB(S,currS)): 
        newSS.insert(S)
    SS = newSS
}}}

*LS_update*:
{{{
  def LS_update: 
    if(HB(oldSS, currS)): 
      newLS = currLS
    else:
      newLS = intersect(LS, currLS)
    LS = newLS
}}}





